//PREFIXES BROWSERS

@mixin crossBrowser($property, $css){
    -webkit-#{$property} : $css;
    -moz-#{$property} : $css;
    -o-#{$property} : $css;
    #{$property} : $css;
}

@mixin border-box{
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    }

//CLEARFIX

%clearfix{
    *zoom: 1;
    &:before,
    &:after{
        content: " ";
        display: table;
    }
    &:after{
        clear: both;
    }
}

//NOTIFICATIONS
%notification{
    display: block;
    margin: 1em auto;
    padding: 1em 2em;
    font-family: sans-serif;
    font-size: 1.5em;
    text-align: center;
}

//OPACITY
@mixin opacity($opacity){
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);  //IE8
}

// ROTATE
@mixin rotate( $degrees ){
  -webkit-transform: rotate(#{$degrees}deg);
  -moz-transform: rotate(#{$degrees}deg);
  -ms-transform: rotate(#{$degrees}deg);
  -o-transform: rotate(#{$degrees}deg);
  transform: rotate(#{$degrees}deg);

  filter:  progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  zoom: 1;
 }

// GRADIENT
@mixin gradient($start-color, $start-percent, $end-color, $end-percent, $orientation){
    background: $start-color;
    @if $orientation == vertical{
        // vertical
        background: -moz-linear-gradient(top,  $start-color $start-percent, $end-color $end-percent);
        background: -webkit-gradient(linear, left top, left bottom, color-stop($start-percent,$start-color), color-stop($end-percent,$end-color));
        background: -webkit-linear-gradient(top,  $start-color $start-percent,$end-color $end-percent);
        background: -o-linear-gradient(top,  $start-color $start-percent,$end-color $end-percent);
        background: -ms-linear-gradient(top,  $start-color $start-percent,$end-color $end-percent);
        background: linear-gradient(to bottom,  $start-color $start-percent,$end-color $end-percent);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
        }
    @else if $orientation == horizontal{
        // horizontal
        background: -moz-linear-gradient(left,  $start-color $start-percent, $end-color $end-percent);
        background: -webkit-gradient(linear, left top, right top, color-stop($start-percent,$start-color), color-stop($end-percent,$end-color));
        background: -webkit-linear-gradient(left,  $start-color $start-percent,$end-color $end-percent);
        background: -o-linear-gradient(left,  $start-color $start-percent,$end-color $end-percent);
        background: -ms-linear-gradient(left,  $start-color $start-percent,$end-color $end-percent);
        background: linear-gradient(to right,  $start-color $start-percent,$end-color $end-percent);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
    }
    @else{
        // radial
        background: -moz-radial-gradient(center, ellipse cover,  $start-color$start-percent, $end-color $end-percent);
        background: -webkit-gradient(radial, center center, 0px, center center,$end-percent, color-stop($start-percent,$start-color),color-stop($end-percent,$end-color));
        background: -webkit-radial-gradient(center, ellipse cover,  $start-color$start-percent,$end-color $end-percent);
        background: -o-radial-gradient(center, ellipse cover,  $start-color$start-percent,$end-color $end-percent);
        background: -ms-radial-gradient(center, ellipse cover,  $start-color$start-percent,$end-color $end-percent);
        background: radial-gradient(ellipse at center,  $start-color$start-percent,$end-color $end-percent);
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
    }
}


// LIST
// Place argument like :
// $listPosition => inside or outside
// $bulletStyle => name of the bullet

@mixin uList($listPosition, $bulletStyle){
    list-style-position: $listPosition;
    list-style-type: $bulletStyle;
}

//bulletPath => path to the image as url('path/to/the/image.png')
@mixin uListImage($listPosition, $bulletPath){
    list-style-position: $listPosition;
    list-style-type:none;
    &::before{
        content:$bulletPath;
    }
}

// List with auto-numbered elements.
//Thanks to Ahmed El Gabri for this mixin: https://gabri.me/blog/sass-mixin-for-auto-numbering-with-css
@mixin auto-numbers($numbered-element, $sep, $counter: item, $nested-parent: false ){
    list-style:none;
    $sel: ();
    @if $nested-parent {
        $sel: append($sel, unquote($nested-parent));

        #{$nested-parent}{
            list-style: none;
            margin-left: 0;
        }
    }
    $sel: append($sel, unquote('&'), comma);

    #{$sel}{
        counter-reset: #{$counter};
        > #{$numbered-element}{
            &:before{
                counter-increment: #{$counter};
                content: if($nested-parent, counters(#{$counter}, "#{$sep} ") "#{$sep} ", counter(#{$counter}) "#{$sep} ") ;
            }
        }
    }
}
